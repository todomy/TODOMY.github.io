name: build Gmeek  # 定义工作流的名称

on:  # 指定触发工作流的事件
  workflow_dispatch:  # 手动触发工作流
  issues:  # 对于 issue 的创建或编辑
    types: [opened, edited]  # 指定触发的类型
  schedule:  # 计划任务
    - cron: "0 24 * * *"  # 每天 UTC 时间 24:00 触发工作流

jobs:  # 定义工作流中的工作（jobs）
  build:  # 定义名为“build”的工作
    name: Generate blog  # 工作的名称
    runs-on: ubuntu-20.04  # 指定运行环境为 Ubuntu 20.04
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' }}  # 仅在仓库所有者或计划任务触发时执行
    permissions:  # 设置权限
      contents: write  # 允许写入仓库内容
      pages: write  # 允许写入 GitHub Pages
      id-token: write  # 允许写入身份令牌
    
    steps:  # 工作的具体步骤
      - name: Checkout  # 步骤：检出代码
        uses: actions/checkout@v4  # 使用 actions 提供的检出操作

      - name: Setup Pages  # 步骤：设置 GitHub Pages
        id: pages  # 步骤标识符，用于后续引用
        uses: actions/configure-pages@v4  # 使用 actions 提供的设置操作

      - name: Get config.json  # 步骤：获取 config.json 配置文件
        run: |
          echo "====== Check config.json file ======"
          cat config.json  # 打印 config.json 内容以进行检查
          echo "====== Check config.json end ======"
          sudo apt-get install jq || { echo "jq installation failed"; exit 1; }  # 安装 jq 工具，并添加错误处理

      - name: Set up Python  # 步骤：设置 Python 环境
        uses: actions/setup-python@v5  # 使用 actions 提供的 Python 设置操作
        with:
          python-version: 3.8  # 指定 Python 版本

      - name: Install dependencies  # 步骤：安装依赖
        run: |
          pip install --upgrade pip  # 更新 pip 到最新版本
          pip install -r requirements.txt  # 安装 requirements.txt 中列出的依赖

      - name: Generate new html  # 步骤：生成新的 HTML 文件
        run: |
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number '${{ github.event.issue.number }}'  # 运行 Gmeek.py 脚本生成 HTML
          # Gmeek.py 应在 ${{ github.workspace }} 目录下运行，并生成所需的文件

      - name: Update html  # 步骤：更新 HTML 文件
        run: |
          git config --local user.email "$(jq -r ".email" config.json)"  # 设置 git 用户邮箱
          git config --local user.name "${{ github.repository_owner }}"  # 设置 git 用户名
          git add .  # 将所有更改添加到暂存区
          git commit -a -m 'Auto update by Gmeek action' || echo "Nothing to commit"  # 提交更改或打印无提交信息
          git push || echo "Nothing to push"  # 推送更改或打印无推送信息
          sleep 3  # 等待 3 秒以确保推送完成

      - name: Upload artifact  # 步骤：上传构建产物
        uses: actions/upload-pages-artifact@v3  # 使用 actions 提供的页面构建产物上传操作
        with:
          path: 'docs/'  # 指定上传路径为 docs 目录

  deploy:  # 定义名为“deploy”的工作
    name: Deploy blog  # 工作的名称
    runs-on: ubuntu-20.04  # 指定运行环境为 Ubuntu 20.04
    needs: build  # 指定依赖的工作为“build”
    permissions:  # 设置权限
      contents: write  # 允许写入仓库内容
      pages: write  # 允许写入 GitHub Pages
      id-token: write  # 允许写入身份令牌
    concurrency:  # 设置并发策略
      group: "pages"  # 并发组名称为“pages”
      cancel-in-progress: false  # 不取消正在进行的并发工作
    environment:  # 设置工作环境
      name: github-pages  # 环境名称
      url: ${{ steps.deployment.outputs.page_url }}  # 页面 URL 来源于部署步骤的输出

    steps:  # 工作的具体步骤
      - name: Deploy to GitHub Pages  # 步骤：部署到 GitHub Pages
        id: deployment  # 步骤标识符
        uses: actions/deploy-pages@v4  # 使用 actions 提供的 Pages 部署操作
